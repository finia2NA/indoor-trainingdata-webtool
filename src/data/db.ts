import Dexie, { Table } from 'dexie';

// Data model
export interface ModelWithoutContent {
  id?: number;
  name: string;
  size: number;
}
export class Model3D implements ModelWithoutContent {
  id: number; // id is generated by addModelToProject
  name: string;
  size: number;
  content: Blob;

  constructor(file: File) {
    this.id = -1; // id is generated by addModelToProject
    this.name = file.name;
    this.size = file.size;

    this.content = file;
  }
}

export class Image360 {
  id: number;
  name: string;
  size: number;
  correctionT: [number, number, number];
  correctionR: [number, number, number];
  content: Blob;

  constructor(file: File) {
    this.id = -1; // id is generated by addImageToProject
    this.name = file.name;
    this.size = file.size;
    this.correctionT = [0, 0, 0];
    this.correctionR = [0, 0, 0];
    this.content = file;
  }
}

export class MetadataFile {
  name: string;
  size: number;
  content: Blob;

  constructor(file: File) {
    this.name = file.name;
    this.size = file.size;
    this.content = file;
  }
}

export class Project {
  id?: number; // id is generated by Dexie
  name: string;
  models: Model3D[];
  images360?: Image360[];
  metadataFile?: MetadataFile;
  nextModelId: number;
  nextImageId: number;
  constructor(name: string,) {
    this.name = name;
    this.models = [];
    this.images360 = [];
    this.nextModelId = 0;
    this.nextImageId = 0;
  }
}


// DB definition
class MyAppDatabase extends Dexie {
  projects!: Table<Project>;

  constructor() {
    super('webtool');
    this.version(3).stores({
      projects: '++id, name, models, images360, metadataFile',
    });
  }

  // Data manipulation methods
  addProject(project: Project): Promise<number> {
    return this.projects.put(project);
  }

  async addModelToProject(projectId: number, model: Model3D): Promise<number> {
    const project = await this.projects.get(projectId);
    if (!project) throw new Error('Project not found');
    model.id = project.nextModelId++;
    project.models.push(model);
    await this.projects.put(project);
    return project.id!;
  }

  async deleteModelFromProject(projectId: number, modelId: number): Promise<void> {
    const project = await this.projects.get(projectId);
    if (!project) throw new Error('Project not found');
    project.models = project.models.filter(model => model.id !== modelId);
    await this.projects.put(project);
  }

  async addImageToProject(projectId: number, image: Image360): Promise<number> {
    const project = await this.projects.get(projectId);
    if (!project) throw new Error('Project not found');
    if (!project.images360) project.images360 = [];
    if (project.nextImageId === undefined) project.nextImageId = 0;
    image.id = project.nextImageId++;
    project.images360.push(image);
    await this.projects.put(project);
    return project.id!;
  }

  async deleteImageFromProject(projectId: number, imageId: number): Promise<void> {
    const project = await this.projects.get(projectId);
    if (!project) throw new Error('Project not found');
    if (project.images360) {
      project.images360 = project.images360.filter(image => image.id !== imageId);
      await this.projects.put(project);
    }
  }

  async deleteAllImagesFromProject(projectId: number): Promise<void> {
    const project = await this.projects.get(projectId);
    if (!project) throw new Error('Project not found');
    project.images360 = [];
    await this.projects.put(project);
  }

  async setMetadataFile(projectId: number, metadataFile: MetadataFile | undefined): Promise<void> {
    const project = await this.projects.get(projectId);
    if (!project) throw new Error('Project not found');
    project.metadataFile = metadataFile;
    await this.projects.put(project);
  }

  async getImages360(projectId: number): Promise<Image360[]> {
    const project = await this.projects.get(projectId);
    if (!project) throw new Error('Project not found');
    return project.images360 || [];
  }

  async getMetadataFile(projectId: number): Promise<MetadataFile | undefined> {
    const project = await this.projects.get(projectId);
    if (!project) throw new Error('Project not found');
    return project.metadataFile;
  }

  async getProject(id: number): Promise<Project | undefined> {
    return await this.projects.get(id);
  }

  async getProjects(): Promise<Project[]> {
    return await this.projects.toArray();
  }

  async setProjectName(id: number, newName: string): Promise<void> {
    await this.projects.update(id, { name: newName });
  }

  async deleteProject(id: number): Promise<void> {
    await this.projects.delete(id);
  }


  /**
   * Clears all tables in the database.
   * @returns A promise that resolves when all tables are cleared.
   */
  async clearAllTables(): Promise<void> {
    const tableNames = this.tables.map(table => table.name);
    await Promise.all(tableNames.map(tableName => this.table(tableName).clear()));
    console.log('All tables cleared!');
  }
}

const db = new MyAppDatabase();
export default db;
