import Dexie, { Table } from 'dexie';

// Data model
export interface ModelWithoutContent {
  id?: number;
  name: string;
  size: number;
}
export class Model3D implements ModelWithoutContent {
  id?: number; // id is generated by addModelToProject
  name: string;
  size: number;
  content: Blob;

  constructor(file: File) {
    this.name = file.name;
    this.size = file.size;

    this.content = file;
  }
}

export class Project {
  id?: number; // id is generated by Dexie
  name: string;
  models: Model3D[];
  nextModelId: number;
  constructor(name: string,) {
    this.name = name;
    this.models = [];
    this.nextModelId = 0;
  }
}


// DB definition
class MyAppDatabase extends Dexie {
  projects!: Table<Project>;

  constructor() {
    super('webtool');
    this.version(2).stores({
      projects: '++id, name, models',
    });
  }

  // Data manipulation methods
  addProject(project: Project): Promise<number> {
    return this.projects.put(project);
  }

  async addModelToProject(projectId: number, model: Model3D): Promise<number> {
    const project = await this.projects.get(projectId);
    if (!project) throw new Error('Project not found');
    model.id = project.nextModelId++;
    project.models.push(model);
    await this.projects.put(project);
    return project.id!;
  }

  async deleteModelFromProject(projectId: number, modelId: number): Promise<void> {
    const project = await this.projects.get(projectId);
    if (!project) throw new Error('Project not found');
    project.models = project.models.filter(model => model.id !== modelId);
    await this.projects.put(project);
  }

  async getProject(id: number): Promise<Project | undefined> {
    return await this.projects.get(id);
  }

  async getProjects(): Promise<Project[]> {
    return await this.projects.toArray();
  }

  async setProjectName(id: number, newName: string): Promise<void> {
    await this.projects.update(id, { name: newName });
  }

  async deleteProject(id: number): Promise<void> {
    await this.projects.delete(id);
  }



  // /**
  //  * Retrieves a model from the database based on the provided ID.
  //  * @param id - The ID of the model to retrieve.
  //  * @returns A Promise that resolves to the retrieved model, or undefined if the model is not found.
  //  */
  // async getModel(id: number): Promise<Model3D | undefined> {
  //   return await this.models.get(id);
  // }

  // /**
  //  * Retrieves models from the database.
  //  * @returns A promise that resolves to an array of models without content.
  //  */
  // async getModels(): Promise<ModelWithoutContent[]> {
  //   const models = await this.models.toArray();
  //   return models.map(({ id, name, size }) => ({ id, name, size }));
  // }


  // /**
  //  * Updates the name of a model in the database.
  //  * @param id - The ID of the model to update.
  //  * @param newName - The new name for the model.
  //  * @returns A Promise that resolves when the update is complete.
  //  */
  // async editModelName(id: number, newName: string): Promise<void> {
  //   await this.models.update(id, { name: newName });
  // }

  // /**
  //  * Deletes a model from the database based on the provided ID.
  //  * @param id - The ID of the model to delete.
  //  * @returns A promise that resolves when the model is deleted.
  //  */
  // async deleteModel(id: number): Promise<void> {
  //   await this.models.delete(id);
  // }

  /**
   * Clears all tables in the database.
   * @returns A promise that resolves when all tables are cleared.
   */
  async clearAllTables(): Promise<void> {
    const tableNames = this.tables.map(table => table.name);
    await Promise.all(tableNames.map(tableName => this.table(tableName).clear()));
    console.log('All tables cleared!');
  }
}

const db = new MyAppDatabase();
export default db;
